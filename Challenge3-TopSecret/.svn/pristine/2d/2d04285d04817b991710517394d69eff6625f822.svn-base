/**
 * A program to search for to encrypt and decrypt lines of text. See
 * CaesarCipher.txt
 * Hints: line.charAt( int ) is useful.
 * You'll need loops, and conditions and variables
 * You'll need to read the Test cases to understand how your program should work.
 * Good Programming Hints: "DRY: Don't Repeat Yourself"
 * Try to make your program as short as possible.
 * TODO: add your netid to the line below
 * @author xma29
 */
public class CaesarCipher {

	public static void main(String[] strings) {
		//TODO: Delete the following line and write your implementation here- 
		int inputIndex;
		String sourceText = "";
		String plain = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		// -3 +26/ -26
		TextIO.putln("Please enter the shift value (between -25..-1 and 1..25)");
		inputIndex = TextIO.getlnInt();
		if (!(inputIndex == 999 || inputIndex == -999))
		{
			while(!((inputIndex >= -25 && inputIndex < -1) || (inputIndex >= 1 && inputIndex <= 25)))
			{
				TextIO.putln(inputIndex + " is not a valid shift value.");
				TextIO.putln("Please enter the shift value (between -25..-1 and 1..25)");
				inputIndex = TextIO.getlnInt();
			}
		
			TextIO.putln("Using shift value of " + inputIndex);
		
			}
			else
			{	
				TextIO.putln("Using position shift");
			}
		
	
		do
		{
			
			TextIO.putln("Please enter the source text (empty line to quit)");
			sourceText = TextIO.getln();
			if (sourceText.length() == 0){
				TextIO.putln("Bye.");
			}
			else
			{

				TextIO.putln("Source   :" + sourceText);
				TextIO.put("Processed:");
				char processedCharacter;
				int i;
				int findIndexOfPlain;
				int cipherIndex;
				for (i = 0; i < sourceText.length();i++)
				{

					
					if(plain.indexOf(sourceText.toUpperCase().charAt(i)) >= 0)
					{ 
						findIndexOfPlain = plain.indexOf(sourceText.toUpperCase().charAt(i)); //0-25
						// punctuation/space 
						//find each character from beginning of the source as returning index of plain
						if (inputIndex == 999)
						{
							processedCharacter = plain.charAt((findIndexOfPlain + i)%26);
							TextIO.put(processedCharacter);
						}
						else
						{
							if (inputIndex == -999)
							{
								processedCharacter = plain.charAt((26+(findIndexOfPlain - i)%26)%26);
								TextIO.put(processedCharacter);
							}
							else
							{
								if(inputIndex + findIndexOfPlain < 0 || inputIndex + findIndexOfPlain < 26)
								{
							// -25+0 + 26.-1+0, 1+25,25+25
									processedCharacter = plain.charAt((26 + inputIndex + findIndexOfPlain)%26);
									TextIO.put(processedCharacter);
								}
								else
						
								{
							
									processedCharacter = plain.charAt((inputIndex + findIndexOfPlain - 26)%26);
									TextIO.put(processedCharacter);
								}

							}
						}
							
						
					//cipherIndex = inputIndex + findIndexOfPlain; 
					//finding cipherIndex + inputIndex 

					}
					else	
					{
						char numbers = sourceText.charAt(i);
						TextIO.put(numbers);
					}
			
				}	
				
				TextIO.put("\n");
			}
		}while(!(sourceText.length() == 0));
						
			//if sourcetext ="\n", bye
			//if sourcetext !="\n", doing function.....
			//after function, asking again about please enter the source text
														
	}	
		
			
}	
	



